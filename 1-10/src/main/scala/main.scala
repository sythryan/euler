import scala.annotation._

object main extends App {
  // #1 
  // If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
  // Find the sum of all the multiples of 3 or 5 below 1000.

  def findAllMultiples(multiple: Int, under: Int): List[Int] = {
    @tailrec
    def inner(nextMultiple: Int, acc: List[Int]): List[Int] = nextMultiple match {
      case e if (e < 1000) => nextMultiple match {
        case e if (e % multiple == 0) => inner(nextMultiple + 1, nextMultiple +: acc)
        case _ => inner(nextMultiple + 1, acc)
      }
      case _ => acc
    }
    inner(1, List())
  }
  print("#1: ")
  println(((findAllMultiples(5, 1000) ++ findAllMultiples(3, 1000)).distinct).sum)

  // # 2
  // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
  // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

  def evenFibonacci(under: Int): List[Int] = {
    @tailrec
    def inner(x: Int, y: Int, acc: List[Int]): List[Int] = (x, y) match {
      case e if (e._1 + e._2 > under) => acc
      case _ => inner(y, x + y, (x + y) +: acc)
    }
    inner(1,2,List(2, 1))
  }
  print("#2: ")
  println(evenFibonacci(4000000).filter(_ % 2 == 0).sum)
}